const express = require('express');
const bodyParser = require('body-parser');
const { Configuration, PlaidApi, PlaidEnvironments } = require('plaid');

const app = express();
app.use(bodyParser.json());

// Replace with your Plaid API keys
const PLAID_CLIENT_ID = 'your_client_id';
const PLAID_SECRET = 'your_secret';
const PLAID_ENV = 'sandbox'; // Use 'development' or 'production' for real environments

// Plaid client configuration
const configuration = new Configuration({
  basePath: PlaidEnvironments[PLAID_ENV],
  baseOptions: {
    headers: {
      'PLAID-CLIENT-ID': PLAID_CLIENT_ID,
      'PLAID-SECRET': PLAID_SECRET,
    },
  },
});
const plaidClient = new PlaidApi(configuration);

// Endpoint to create a link token
app.post('/api/create-link-token', async (req, res) => {
  try {
    const { userId } = req.body; // Pass user ID from the front end
    const response = await plaidClient.linkTokenCreate({
      user: {
        client_user_id: userId, // Unique user identifier
      },
      client_name: 'Your App Name',
      products: ['transactions'], // Products: transactions, auth, etc.
      country_codes: ['US'],
      language: 'en',
      redirect_uri: 'https://your-app.com/callback', // Optional for web apps
    });
    res.json({ link_token: response.data.link_token });
  } catch (error) {
    console.error('Error creating link token:', error);
    res.status(500).json({ error: 'Could not create link token' });
  }
});

// Endpoint to exchange public token for access token
app.post('/api/exchange-public-token', async (req, res) => {
  try {
    const { public_token } = req.body;
    const response = await plaidClient.itemPublicTokenExchange({
      public_token,
    });
    const { access_token, item_id } = response.data;
    // Save access_token and item_id securely in your database
    res.json({ access_token, item_id });
  } catch (error) {
    console.error('Error exchanging public token:', error);
    res.status(500).json({ error: 'Could not exchange public token' });
  }
});

// Endpoint to fetch transactions
app.post('/api/get-transactions', async (req, res) => {
  try {
    const { access_token, start_date, end_date } = req.body;
    const response = await plaidClient.transactionsGet({
      access_token,
      start_date,
      end_date,
    });
    res.json(response.data);
  } catch (error) {
    console.error('Error fetching transactions:', error);
    res.status(500).json({ error: 'Could not fetch transactions' });
  }
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
